@using IglaClub.ObjectModel.Enums
@model IglaClub.ObjectModel.Entities.Tournament

@Scripts.Render("~/bundles/DateTimepickerJs")
@Styles.Render("~/Content/DateTimepickerCss")

@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    
    DateTime startDate = DateTime.Now.AddMinutes(-DateTime.Now.Minute).AddSeconds(-DateTime.Now.Second).AddHours(1);
    
    <fieldset class="create-tournament">
        <legend>Add new tournament</legend>

        <div class="editor-label">
            @Html.LabelFor(model => model.Name)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Name)
            @Html.ValidationMessageFor(model => model.Name)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Description)
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(model => model.Description)
            @Html.ValidationMessageFor(model => model.Description)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.BoardsInRound)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.BoardsInRound)
            @Html.ValidationMessageFor(model => model.BoardsInRound)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.TournamentScoringType)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.TournamentScoringType, new SelectList(Enum.GetValues(typeof(TournamentScoringType))))
            @Html.ValidationMessageFor(model => model.TournamentScoringType)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.TournamentMovingType)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.TournamentMovingType, new SelectList(Enum.GetValues(typeof(TournamentMovingType))))
            @Html.ValidationMessageFor(model => model.TournamentMovingType)
        </div>
        
        <div class="editor-label">
            @Html.LabelFor(model => model.PlannedStartDate)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.PlannedStartDate, new { @Value = startDate, id = "datepicker" })
            @Html.ValidationMessageFor(model => model.PlannedStartDate)
        </div>
                <div class="editor-label">
            @Html.LabelFor(model => model.Address)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Address, new {@placeholder = "Search address"})
            @Html.ValidationMessageFor(model => model.Address)
        </div>
    <label>Location on map</label>
        <div id="map-canvas"></div>
        <p>
            <button type="submit" class="btn btn-success btn-lg"><span class="glyphicon glyphicon-plus"></span> Create</button>
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@*@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}*@

<script>
    jQuery('#datepicker').datetimepicker();
</script>
<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&signed_in=true&libraries=places"></script>
<script src="~/Scripts/gmap-plugin.js"></script>
<script>
    $(document).ready(function () {
        var options = {
            coordinates: '( 50.06139,19.93833)'
        };
        $("#map-canvas").initializeMap(options);
    });
</script>