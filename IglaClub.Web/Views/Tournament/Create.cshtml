@using IglaClub.ObjectModel.Consts
@using IglaClub.ObjectModel.Enums
@model IglaClub.ObjectModel.Entities.Tournament

@Scripts.Render("~/bundles/DateTimepickerJs")
@Styles.Render("~/Content/DateTimepickerCss")
    <div class="row">
        <div class="col-md-6 col-xs-12 column-padding">
@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    
    DateTime startDate = DateTime.Now.AddMinutes(-DateTime.Now.Minute).AddSeconds(-DateTime.Now.Second).AddHours(1);

    <fieldset class="create-tournament">
        <legend>Add new tournament</legend>
        
        @Html.ValidationMessage("ExcessiveRequests")

        <div class="editor-label">
            @Html.LabelFor(model => model.Name)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Name, new { @class = "form-control"})
            @Html.ValidationMessageFor(model => model.Name)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Description)
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(model => model.Description, new { @class = "form-control"})
            @Html.ValidationMessageFor(model => model.Description)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.BoardsInRound)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.BoardsInRound, new { @type="number", @class = "form-control", @min="1", @max="5000"})
            @Html.ValidationMessageFor(model => model.BoardsInRound)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.TournamentScoringType)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.TournamentScoringType, new SelectList(Enum.GetValues(typeof(TournamentScoringType))),  new { @class = "form-control", title=StringResources.TournamentScoringTypesTitle})
            @Html.ValidationMessageFor(model => model.TournamentScoringType)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.TournamentMovingType)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.TournamentMovingType, new SelectList(Enum.GetValues(typeof(TournamentMovingType))), new { @class = "form-control", title = StringResources.TournamentMovingTypesTitle })
            @Html.ValidationMessageFor(model => model.TournamentMovingType)
        </div>
        
        <div class="editor-label">
            @Html.LabelFor(model => model.PlannedStartDate)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.PlannedStartDate, new { @Value = startDate, id = "datepicker", @class = "form-control" })
            @Html.ValidationMessageFor(model => model.PlannedStartDate)
        </div>
                <div class="editor-label">
            @Html.LabelFor(model => model.Address)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Address, new {@placeholder = "Search address", @id="pac-input", @class = "form-control"})
            @Html.ValidationMessageFor(model => model.Address)
        </div>
        @*<input name="coords" id="coords" type="hidden"/>*@
        @Html.HiddenFor(model=>model.Coordinates, new {name="coords", id="coords"})
        @Html.HiddenFor(model=>model.ClubId)

    <label>Location on map</label>
        <div id="map-canvas"></div>
        <p class="submit-button">
            <button type="submit" class="btn btn-success btn-lg"><span class="glyphicon glyphicon-plus right-side-margin"></span> Create</button>
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
</div>
    </div>

<script>
    jQuery('#datepicker').datetimepicker();
</script>
<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=places"></script>
<script src="~/Scripts/gmap-plugin.js"></script>
<script>
    $(document).ready(function () {
        var options = {
            coordinates: '@(Model.Coordinates)'
        };
        
        $("#map-canvas").initializeMap(options);
    });
</script>