@using IglaClub.ObjectModel.Enums
@model IglaClub.ObjectModel.Entities.Tournament

@{
    ViewBag.Title = "Edit tournament - " + @Model.Name;
}

@Styles.Render("~/Content/DateTimepickerCss")
<div class="row">
    <div class="col-md-12 column-padding">
        <div class="row">
            <div class="col-md-6 col-xs-12">
        
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true)

                    <fieldset class="create-tournament">
                        <legend>Edit @Model.Name</legend>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Name)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Name, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Name)
                        </div>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.Description)
                        </div>
                        <div class="editor-field">
                            @Html.TextAreaFor(model => model.Description, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Description)
                        </div>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.BoardsInRound)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.BoardsInRound, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.BoardsInRound)
                        </div>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.PlannedStartDate)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.PlannedStartDate, new { id = "datepicker", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.PlannedStartDate)
                        </div>
                        @if (Model.TournamentStatus == TournamentStatus.Planned)
                        {
                            <div class="editor-label">
                                @Html.LabelFor(model => model.TournamentScoringType)
                            </div>
                            <div class="editor-field">
                                @Html.DropDownListFor(model => model.TournamentScoringType, new SelectList(Enum.GetValues(typeof(TournamentScoringType))), new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.TournamentScoringType)
                            </div>
                            <div class="editor-label">
                                @Html.LabelFor(model => model.TournamentMovingType)
                            </div>
                            <div class="editor-field">
                                @Html.DropDownListFor(model => model.TournamentMovingType, new SelectList(Enum.GetValues(typeof(TournamentMovingType))), new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.TournamentMovingType)
                            </div>
                        }
                        else
                        {
                            @Html.HiddenFor(model => model.TournamentScoringType)
                            @Html.HiddenFor(model => model.TournamentMovingType)
                        }
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Address)
                        </div>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Address, new { @id = "pac-input", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Address)
                        </div>
                        <input name="coords" id="coords" type="hidden" />

                        <label>Location on map</label>
                        <div id="map-canvas"></div>
                        @Html.HiddenFor(model => model.Id)
                        @Html.HiddenFor(model => model.StartDate)

                        @Html.HiddenFor(model => model.CreationDate)
                        @Html.HiddenFor(model => model.TournamentStatus)
                        @Html.HiddenFor(model => model.CurrentRound)
                        @Html.HiddenFor(model => model.OwnerId)


                        <p class="submit-button">
                            <button type="submit" class="btn btn-success btn-lg"><span class="glyphicon glyphicon-ok"></span>Save</button>
                        </p>
                    </fieldset>
                }

                <div>
                    @Html.ActionLink("Back to List", "Index") |
                    @Html.ActionLink("Manage tournament", "Manage", new { id = Model.Id })
                </div>
            </div>
            <div class="col-md-6 col-xs-12 action-pane">
                <p><span class="medium-header">Edit participants list</span></p>
        <div class="pairs" id="participantsDiv">
                @Html.Action("TournamentParticipantsEdit", new { tournamentId = @Model.Id })
            </div>
            </div>
    </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/DateTimepickerJs")
}

<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&signed_in=true&libraries=places"></script>
<script src="~/Scripts/gmap-plugin.js"></script>
<script>
    $(document).ready(function () {
        jQuery('#datepicker').datetimepicker();
        
        var options = {
            coordinates: '@(Model.Coordinates ?? "( 50.06139,19.93833)")'
        };
        //$("#map-canvas").initializeMap(options);
    });
</script>
