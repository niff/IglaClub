@using IglaClub.ObjectModel.Consts
@using IglaClub.ObjectModel.Enums
@model IglaClub.ObjectModel.Entities.Result

@{
    var possiblePlayedByValues = new List<NESW> { NESW.PassedOut, NESW.North, NESW.South, NESW.West, NESW.East };
    var labelDict = new Dictionary<string, string>
        {
            {"passedout","passed out"},
            //{"notrump","NT"},
            {"notdoubled","–"},
            {"doubled","X"},
            {"redoubled","XX"}
        };
}
<div class="row">
<div class="col-xs-12 column-padding-small single-result-edit">
    <span class="small-header">Results, board @Model.Board.BoardNumber</span>

    <form class="form-inline">
        <div class="form-group">
            @Html.TextBox("ShortScore", "", new { @class = "form-control", @placeholder = "Short form", Title = StringResources.ShortScoreTooltip })
            <button type="submit" class="btn btn-success btn-small"><i class="glyphicon glyphicon-plus"></i></button>
        </div>
    </form>

    <strong>Level</strong>
    <div class="btn-toolbar">
        <div id="ContractLevel" class="btn-group btn-group-justified" data-toggle="buttons">

            @for (int i = 0; i < 8; i++)
            {
                var selected = i == @Model.ContractLevel;
                var active = selected ? "active" : "";
                var chkd = selected ? "checked" : "";
                <label class="btn btn-default @active">
                    <input type="radio" name="ContractLevel" id="@("option" + i)" data-value="@i" autocomplete="off" @chkd>
                    <strong>@i</strong>
                </label>
            }
        </div>
    </div>

        <strong>Color</strong>
    <div class="btn-toolbar">
        <div id="ContractColor" class="btn-group btn-group-justified" data-toggle="buttons">
            @foreach (var color in Enum.GetValues(typeof(ContractColors)).Cast<ContractColors>())
            {
                var selected = color == @Model.ContractColor;
                var chkd = selected ? "checked" : "";
                var active = selected ? "active" : "";
                <label class="btn btn-default @active">
                    <img src="../../Content/img/cards/@(color.ToString().ToLowerInvariant()).png"/>
                    <input type="radio" name="ContractColor" id="@("option" + (int)color)" data-value="@((int)color)" autocomplete="off" @chkd>
                </label>
            }

        </div>
    </div>

        <strong>Dbl</strong>
    <div class="btn-toolbar">
        <div id="ContractDoubled" class="btn-group btn-group-justified" data-toggle="buttons">
            @foreach (var dbl in Enum.GetValues(typeof(ContractDoubled)).Cast<ContractDoubled>())
            {
                var selected = dbl == @Model.ContractDoubled;
                var chkd = selected ? "checked" : "";
                var active = selected ? "active" : "";
                var key = dbl.ToString().ToLowerInvariant();
                var label = labelDict.ContainsKey(key) ? labelDict[key] : dbl.ToString();
                var fontColor = label.Equals("X") ? "rgb(237, 101, 101)" : (label.Equals("XX") ? "rgb(87, 112, 240)" : "black");
                var fontSizeClass = "large-font";
                <label class="btn btn-default @fontSizeClass @active">
                    @*<img src="../../Content/img/cards/@(dbl.ToString().ToLowerInvariant()).png"/>*@
                    <input type="radio" name="ContractDoubled" id="@("option" + (int)dbl)" data-value="@((int)dbl)" autocomplete="off" @chkd>
                    <strong style="color: @fontColor ;">@label</strong>
                </label>
            }
        </div>
    </div>

        <strong>Played by</strong>
    <div class="btn-toolbar">
        <div id="PlayedBy" class="btn-group btn-group-justified" data-toggle="buttons">
            @foreach (var position in possiblePlayedByValues)
            {
                var selected = position == @Model.PlayedBy;
                var chkd = selected ? "checked" : "";
                var active = selected ? "active" : "";
                var key = position.ToString().ToLowerInvariant();
                var label = labelDict.ContainsKey(key) ? labelDict[key] : position.ToString().Substring(0, 1);
                var fontSizeClass = !key.Equals("passedout") ? "large-font" : "";
                <label class="btn btn-default @fontSizeClass @active">
                    @*<img src="../../Content/img/cards/@(position.ToString().ToLowerInvariant()).png"/>
                    <input type="radio" name="PlayedBy" id="@("option" + (int)position)" data-value="@((int)position)" autocomplete="off" @chkd>*@
                    <input type="radio" name="PlayedBy" id="@("option" + (int)position)" data-value="@((int)position)" autocomplete="off" @chkd>
                    <strong>@label</strong>
                </label>
            }
        </div>
    </div>

        <strong>Tricks</strong>
    <div class="btn-toolbar" role="toolbar" id="NumberOfTricks" data-toggle="buttons">
        @for (int j = 0; j < 2; j++)
        {
            <div class="btn-group btn-group-justified">
            @for (int i = 0 + (j * 7); i < 7 + (j * 7); i++)
                    {
                        var selected = i == @Model.NumberOfTricks;
                        var active = selected ? "active" : "";
                        var chkd = selected ? "checked" : "";
                        <label class="btn btn-default @active">
                            <input type="radio" name="NumberOfTricks" id="@("trick" + i)" data-value="@i" autocomplete="off" @chkd>
                            <strong>@i</strong>
                        </label>
                    }
            </div>
        }
    </div>
    
    @Html.HiddenFor(m => m.TournamentId)
    @Html.HiddenFor(m => m.BoardId)
    @Html.HiddenFor(m => m.Id)
    @Html.HiddenFor(m => m.ResultNsPoints)
    @Html.HiddenFor(m => m.ScoreEw)
    @Html.HiddenFor(m => m.ScoreNs)
    <p class="submit-button">
    <button class="btn btn-success save-quick-result">Save</button>
        </p>
</div>
</div>
<script src="~/Scripts/jquery-bigtext.js"></script>
<script>
    $(document).ready(function () {
        var redirectUrl = '@Url.Action("RoundDetails", "Round", new { tournamentId = @Model.TournamentId })';
        
        function getSelectedValue(areaId) {
            var selector = "div#" + areaId + " label input:checked";
            return $(selector).data("value");
        }
        function redirectToRound() {
            window.location.href = redirectUrl;
        }

        $(".save-quick-result").on("click", function () {
            var result = {
                Id: '@Model.Id',
                ContractLevel: getSelectedValue("ContractLevel"),
                ContractColor: getSelectedValue("ContractColor"),
                ContractDoubled: getSelectedValue("ContractDoubled"),
                PlayedBy: getSelectedValue("PlayedBy"),
                NumberOfTricks: getSelectedValue("NumberOfTricks"),
                ResultNsPoints: "@Model.ResultNsPoints",
                BoardId: "@Model.BoardId",
                TournamentId: "@Model.TournamentId",
                RoundNumber: "@Model.RoundNumber",
                TableNumber: "@Model.TableNumber",
                ScoreNs: "@Model.ScoreNs",
                ScoreEw: "@Model.ScoreEw"
            };
            $.ajax({
                url: "EditResult",
                type: "POST",
                dataType: 'json',
                data: result,
                success: redirectToRound
            });
        });
    });
</script>