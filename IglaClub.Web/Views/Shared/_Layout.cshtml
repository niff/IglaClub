<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>@ViewBag.Title - Igla Club</title>
    <link href="../../Content/img/cards/hearts-icon.png" rel="shortcut icon" type="image/x-icon" />
    <meta name="viewport" content="width=device-width" />

    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/qtip")
    @Scripts.Render("~/bundles/bootstrap")

    <!--[if IE]>
<style type="text/css">
  .only-ie {
      display: inline;
  }
</style>
    <![endif]-->
    <script>
        (function (i, s, o, g, r, a, m) {
            i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
                (i[r].q = i[r].q || []).push(arguments)
            }, i[r].l = 1 * new Date(); a = s.createElement(o),
            m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
        })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

        ga('create', 'UA-66226792-2', 'auto');
        ga('send', 'pageview');

    </script>

</head>
    <body>
        <div class="wrapper">
            <div class="container">
                @Html.Partial("_TopMenu")

                @{
                    var message = TempData["Message"];
                    var type = TempData["MessageType"] != null ? TempData["MessageType"].ToString().ToLower() : "info";

                    if (message != null && message is string)
                    {
                        <div class="alert alert-@type alert-dismissible" role="alert">
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                            @Html.Raw(message)
                        </div>
                    }
                }

                @RenderSection("featured", required: false)
                <div class="column-padding-layout">
                    @Html.MvcSiteMap().SiteMapPath("BootstrapSiteMapPathHelperModel") 
                    @RenderBody()
                    <button id="auth-button" hidden>Authorize</button>

                    <h1>Hello Analytics</h1>

                    <textarea cols="80" rows="20" id="query-output"></textarea>
                </div>
            </div>

            <footer>
                <div class="footer-menu">
                    <span>@Html.ActionLink("Home", "Index", "Home", new { area = "" }, null)</span> |
                    <span>@Html.ActionLink("About", "About", "Home", new { area = "" }, null)</span>|
                    <span>@Html.ActionLink("Contact", "Contact", "Home", new { area = "" }, null)</span>
                </div>
                <div class="row text-center text-muted small">
                    <p>&copy; @DateTime.Now.Year - Igla Club - All rights reserved.</p>
                </div>
            </footer>
        </div>
    </body>
    
    <script>

        // Replace with your client ID from the developer console.
        var CLIENT_ID = '682454275672-n9m97itvr5ag6uc2m1bn80b622svcjok.apps.googleusercontent.com';

        // Set authorized scope.
        var SCOPES = ['https://www.googleapis.com/auth/analytics.readonly'];


        function authorize(event) {
            // Handles the authorization flow.
            // `immediate` should be false when invoked from the button click.
            var useImmdiate = event ? false : true;
            var authData = {
                client_id: CLIENT_ID,
                scope: SCOPES,
                immediate: useImmdiate
            };

            gapi.auth.authorize(authData, function (response) {
                var authButton = document.getElementById('auth-button');
                if (response.error) {
                    authButton.hidden = false
                    console.log(response.error);
                }
                else {
                    authButton.hidden = true;
                    queryAccounts();
                    console.log(response.error);

                }
            });
        }


        function queryAccounts() {
            // Load the Google Analytics client library.
            gapi.client.load('analytics', 'v3').then(function () {

                // Get a list of all Google Analytics accounts for this user
                gapi.client.analytics.management.accounts.list().then(handleAccounts);
            });
        }


        function handleAccounts(response) {
            // Handles the response from the accounts list method.
            if (response.result.items && response.result.items.length) {
                // Get the first Google Analytics account.
                var firstAccountId = response.result.items[0].id;

                // Query for properties.
                queryProperties(firstAccountId);
            } else {
                console.log('No accounts found for this user.');
            }
        }


        function queryProperties(accountId) {
            // Get a list of all the properties for the account.
            gapi.client.analytics.management.webproperties.list(
                { 'accountId': accountId })
                .then(handleProperties)
                .then(null, function (err) {
                    // Log any errors.
                    console.log(err);
                });
        }


        function handleProperties(response) {
            // Handles the response from the webproperties list method.
            if (response.result.items && response.result.items.length) {

                // Get the first Google Analytics account
                var firstAccountId = response.result.items[0].accountId;

                // Get the first property ID
                var firstPropertyId = response.result.items[0].id;

                // Query for Views (Profiles).
                queryProfiles(firstAccountId, firstPropertyId);
            } else {
                console.log('No properties found for this user.');
            }
        }


        function queryProfiles(accountId, propertyId) {
            // Get a list of all Views (Profiles) for the first property
            // of the first Account.
            gapi.client.analytics.management.profiles.list({
                'accountId': accountId,
                'webPropertyId': propertyId
            })
                .then(handleProfiles)
                .then(null, function (err) {
                    // Log any errors.
                    console.log(err);
                });
        }


        function handleProfiles(response) {
            // Handles the response from the profiles list method.
            if (response.result.items && response.result.items.length) {
                // Get the first View (Profile) ID.
                var firstProfileId = response.result.items[0].id;

                // Query the Core Reporting API.
                queryCoreReportingApi(firstProfileId);
            } else {
                console.log('No views (profiles) found for this user.');
            }
        }


        function queryCoreReportingApi(profileId) {
            // Query the Core Reporting API for the number sessions for
            // the past seven days.
            gapi.client.analytics.data.ga.get({
                'ids': 'ga:' + profileId,
                'start-date': '7daysAgo',
                'end-date': 'today',
                'metrics': 'ga:sessions'
            })
                .then(function (response) {
                    var formattedJson = JSON.stringify(response.result, null, 2);
                    //document.getElementById('query-output').value = formattedJson
                    console.log(formattedJson);
                })
                .then(null, function (err) {
                    // Log any errors.
                    console.log(err);
                });
        }

        // Add an event listener to the 'auth-button'.
        document.getElementById('auth-button').addEventListener('click', authorize);

        //$(document).ready(function (){
        //    //authorize();
        //});
    </script>


<script src="https://apis.google.com/js/client.js?onload=authorize"></script>
@RenderSection("scripts", required: false)
</html>
<script>
    $(document).ready(function () {
        $('[title!=""]').qtip({
            style: {"font-size" : 12},
            position: {
                my: 'center left',  // Position my top left...
                at: 'center right',// at the bottom right of...
                corner: {
                    target: 'leftMiddle',
                    tooltip: 'leftMiddle'
                }
            }
        });

        $("[data-toggle=popover]").popover({
            html: true,
            trigger: "focus",
            placement:"top"
        });
    });

</script>
